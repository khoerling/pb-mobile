{
  "name": "urllite",
  "version": "0.4.1",
  "description": "A lightweight URL library for JavaScript.",
  "main": "./lib/complete.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.13.0",
    "coffee-script": "~1.6.3",
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-bump": "0.0.11",
    "grunt-browserify": "~2.0.0",
    "underscore": "~1.5.2",
    "chai": "~1.9.0",
    "coffeeify": "~0.6.0",
    "grunt-mocha-test": "~0.9.0"
  },
  "scripts": {
    "prepublish": "grunt build",
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hzdg/urllite.js.git"
  },
  "keywords": [
    "javascript",
    "browser"
  ],
  "author": {
    "name": "Matthew Tretter",
    "email": "m@tthewwithanm.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/hzdg/urllite.js/issues"
  },
  "readme": "urllite.js\n==========\n\nurllite is a URL parser for nodejs and the browser. It's meant to be a\nreplacement for [URL decomposition IDL attributes][1]â€”especially when you want\nto support non-browser environments like node. Its main goal is to be tiny\nenough to be bundled with browser builds of JS libraries.\n\nurllite is designed to be modular so that you can include only the parts you\nneed. For example, URL resolution is a separate extension.\n\nIts core API is based on the [URLUtils] interface (the properties of \"a\"\nHTMLElements and `window.location`):\n\n```javascript\nvar url = urllite('http://u:p@example.com:10/a/b/c?one=1&two=2#three');\nurl.origin    // \"http://example.com:10\"\nurl.protocol  // \"http:\"\nurl.username  // \"u\"\nurl.password  // \"p\"\nurl.host      // \"example.com:10\"\nurl.hostname  // \"example.com\"\nurl.port      // \"10\"\nurl.pathname  // \"/a/b/c\"\nurl.search    // \"?one=1&two=2\"\nurl.hash      // \"#three\"\n```\n\n\n## Usage\n\n\n### In the browser\n\n```html\n<script src=\"urllite.js\"></script>\n<script>\n    var url = urllite('http://u:p@example.com:10/a/b/c?one=1&two=2#three');\n</script>\n```\n\nYou can also use urllite as an AMD module.\n\n\n### In node\n\n```javascript\nvar urllite = require('urllite');\nvar url = urllite('http://u:p@example.com:10/a/b/c?one=1&two=2#three');\n```\n\n\n### In your own libraries\n\nYou can compile urllite into your own libraries using a tool like [browserify].\n\n\n## API\n\nThe `urllite` function is the main entry point. Use it to parse a URL:\n\n```javascript\nvar url = urllite('http://example.com');\nconsole.log(url.host);  // => \"example.com\"\n```\n\nAll URL methods are available as extensions. In node, all extensions are\navailable by default. For the browser, you can require extensions selectively\nand create custom builds with only the extensions you need.\n\n\n### `resolve()`\n\nResolves the URL to the given base.\n\n```javascript\nvar url = urllite('dogs/are/awesome');\nconsole.log(url.resolve('http://animals.com').toString());  // => \"http://animals.com/dogs/are/awesome\"\n```\n\n\n### `relativize()`\n\nReturns a new URL which is a relative to the provided URL.\n\n```javascript\nvar url = urllite('http://animals.com/dogs/are/awesome');\nconsole.log(url.relativize('http://animals.com').toString());  // => \"dogs/are/awesome\"\n```\n\n\n[1]: http://www.w3.org/TR/url/#the-url-decomposition-idl-attributes\n[URLUtils]: https://developer.mozilla.org/en-US/docs/Web/API/URLUtils\n[browserify]: http://browserify.org\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/hzdg/urllite.js",
  "_id": "urllite@0.4.1",
  "_from": "urllite@~0.4.0"
}
