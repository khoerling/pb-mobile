{
  "name": "url-pattern",
  "version": "0.4.0",
  "description": "url-pattern matches urls with patterns and extracts named url segments",
  "keywords": [
    "url",
    "pattern",
    "matching",
    "routing",
    "route",
    "regex",
    "match"
  ],
  "homepage": "http://github.com/snd/url-pattern",
  "author": {
    "name": "Maximilian KrÃ¼ger",
    "email": "kruemaxi@gmail.com",
    "url": "http://github.com/snd"
  },
  "contributors": [
    {
      "name": "Andrey Popp",
      "email": "8mayday@gmail.com",
      "url": "https://github.com/andreypopp"
    }
  ],
  "bugs": {
    "url": "http://github.com/snd/url-pattern/issues",
    "email": "kruemaxi@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/snd/url-pattern.git"
  },
  "licenses": {
    "type": "MIT",
    "url": "git://github.com/snd/url-pattern/LICENSE"
  },
  "engines": {
    "node": ">=0.8.5"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "0.8.5",
    "coffee-script": "1.7.1"
  },
  "main": "src/url-pattern",
  "scripts": {
    "prepublish": "coffee --bare --compile --output src src/*.coffee",
    "postpublish": "rm src/*.js",
    "pretest": "coffee --bare --compile --output src src/*.coffee && coffee --bare --compile --output test test/*.coffee",
    "posttest": "rm src/*.js && rm test/*.js",
    "test": "node_modules/nodeunit/bin/nodeunit test/*.js"
  },
  "readme": "# url-pattern\n\n[![Build Status](https://travis-ci.org/snd/url-pattern.png)](https://travis-ci.org/snd/url-pattern)\n\nurl-pattern matches urls with patterns and extracts named url segments\n\nif you are looking for simple composable routing that builds on top of url-pattern [check out passage](https://github.com/snd/passage)\n\n### install\n\n```\nnpm install url-pattern\n```\n\n**or**\n\nput this line in the dependencies section of your `package.json`:\n\n```\n\"url-pattern\": \"0.4.0\"\n```\n\nthen run:\n\n```\nnpm install\n```\n\n### use\n\n##### require\n\n```javascript\nvar newUrlPattern = require('url-pattern');\n```\n\n##### make pattern from string\n\n```javascript\nvar pattern = newUrlPattern('/users/:id');\n```\n\n##### match pattern against url\n\nmatch returns the extracted parameters or `null` if there was no match:\n\n```javascript\npattern.match('/users/5'); // => {id: '5'}\npattern.match('/projects/5'); // => null\n```\n\n##### make pattern from regex\n\n```javascript\nvar regexPattern = newUrlPattern(/\\/test\\/(.*)/);\n```\n\n##### match regex pattern against url\n\nif the pattern was created from a regex an array of the captured groups is returned on match:\n\n```javascript\nregexPattern.match('/test/users'); // => ['users']\nregexPattern.match('/users/test'); // => null\n```\n\n##### make wildcard pattern from string\n\n```javascript\nvar wildcardPattern = newUrlPattern('*/users/:id/*');\n```\n\n##### match wildcard pattern against url\n\nwildcard matches are collected in the `_` property:\n\n```javascript\nwildcardPattern.match('/api/v1/users/10/followers/20');\n// => {id: '10', _: ['/api/v1', 'followers/20'}\n```\n\n### pattern examples\n\n`/users` will match exactly `/users`\n\n`/projects/:projectId/supporters/:supporterId` will match any url where the first\nsegment is `projects`, the second segment is not empty, the third segment is\n`supporters` and the fourth segment is not empty. the second and fourth segments will be bound\nto `projectId` and `supporterId`\n\n`/projects/*` will match any url which begins with `/projects/`\n\n`*/projects` will match any url which ends with `/projects`\n\n`/users/*/projects` will match any url which starts with `/users/` and ends with `/projects`\n\n### license: MIT\n",
  "readmeFilename": "README.md",
  "_id": "url-pattern@0.4.0",
  "_from": "url-pattern@~0.4.0"
}
