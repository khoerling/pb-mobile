{
  "name": "pretty-error",
  "version": "0.1.17",
  "description": "Readable errors for node",
  "main": "scripts/js/lib/PrettyError.js",
  "dependencies": {
    "utila": "~0.3",
    "renderkid": "~0.2.0-beta.10"
  },
  "devDependencies": {
    "coffee-script": "~1.6.3",
    "little-popo": "~0.1.4"
  },
  "scripts": {
    "test": "node ./node_modules/coffee-script/bin/cake test",
    "prepublish": "node ./node_modules/coffee-script/bin/cake build"
  },
  "author": {
    "name": "Aria Minaei"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/AriaMinaei/pretty-error.git"
  },
  "bugs": {
    "url": "https://github.com/AriaMinaei/pretty-error/issues"
  },
  "readme": "# PrettyError\r\n[![Build Status](https://secure.travis-ci.org/AriaMinaei/pretty-error.png)](http://travis-ci.org/AriaMinaei/pretty-error)\r\n\r\nA small tool to render node.js errors with less clutter, like this:\r\n\r\n![screenshot of PrettyError](https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/pretty-error-screenshot.png)\r\n\r\n... which is more readable compared to node's unformatted errors:\r\n\r\n![screenshot of normal errors](https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/normal-error-screenshot.png)\r\n\r\n## Installation\r\n\r\nInstall with npm:\r\n\r\n\tnpm install pretty-error\r\n\r\n## Usage\r\n\r\nTo see all errors rendered with colors, there is a shortcut for it:\r\n```javascript\r\nrequire('pretty-error').start(function(){\r\n\tstartTheApp();\r\n});\r\n```\r\n\r\n... which is essentially equal to:\r\n```javascript\r\nPrettyError = require('pretty-error');\r\n\r\n// instantiate PrettyError, which can then be used to\r\n// render error objects\r\npe = new PrettyError();\r\n\r\n// catch uncaught exceptions in node.js\r\nprocess.on('uncaughtException', function(error){\r\n\r\n\t// this would render the caught error into a string...\r\n\tvar rendered = pe.render(error);\r\n\r\n\t// ... which we can then use to log to the console\r\n\tconsole.error(rendered);\r\n\r\n\t// we should then exit the program, as advised in node's documentation:\r\n\t// http://nodejs.org/docs/v0.10.0/api/process.html#process_event_uncaughtexception\r\n\tprocess.exit(1);\r\n});\r\n\r\n// 'uncaughtException' will start listening on the next tick,\r\n// so we must postpone everything that might generate errors\r\n// to the next tick:\r\nprocess.nextTick(function(){\r\n\tstartTheApp();\r\n});\r\n\r\n// and of course, you can use it to render handled exceptions too:\r\ntry {\r\n\r\n\taNonExistingFunction(); // this will throw an error\r\n\r\n} catch (error) {\r\n\r\n\t// and we can render it out, just like unhandled errors\r\n\tconsole.log(pe.render(error));\r\n\r\n}\r\n```\r\n\r\n## How it Works\r\n\r\nPrettyError turns error objects into something similar to an html document, and then uses the upcoming [RenderKid](https://github.com/AriaMinaei/renderkid) to render the document using simple html/css-like commands for the console. This allows PrettyError to be themed using simple css-like declarations.\r\n\r\n## Theming\r\n\r\nPrettyError's default theme is a bunch of simple css-like declarations. [Here](https://github.com/AriaMinaei/pretty-error/blob/master/scripts/coffee/lib/prettyError/defaultStyle.coffee) is the source of the default theme.\r\n\r\nSurely, you can change all aspects of this theme. Let's do a minimal one:\r\n```javascript\r\n// the start() shortcuts returns an instance of PrettyError ...\r\npe = require('pretty-error').start();\r\n\r\n// ... which we can then use to customize with css declarations:\r\npe.adppendStyle({\r\n\r\n\t// this is a simple selector to the element that says 'Error'\r\n\t'pretty-error > header > title > kind': {\r\n\r\n\t\t// which we can hide:\r\n\t\tdisplay: 'none'\r\n\r\n\t},\r\n\r\n\t// the 'colon' after 'Error':\r\n\t'pretty-error > header > colon': {\r\n\r\n\t\t// we hide that too:\r\n\t\tdisplay: 'none'\r\n\r\n\t},\r\n\r\n\t// our error message\r\n\t'pretty-error > header > message': {\r\n\r\n\t\t// let's change its color:\r\n\t\tcolor: 'bright-white',\r\n\r\n\t\t// we can use black, red, green, yellow, blue, magenta, cyan, white,\r\n\t\t// grey, bright-red, bright-green, bright-yellow, bright-blue,\r\n\t\t// bright-magenta, bright-cyan, and bright-white\r\n\r\n\t\t// we can also change the background color:\r\n\t\tbackground: 'cyan',\r\n\r\n\t\t// it understands paddings too!\r\n\t\tpadding: '0 1' // top/bottom left/right\r\n\r\n\t},\r\n\r\n\t// each trace item ...\r\n\t'pretty-error > trace > item': {\r\n\r\n\t\t// ... can have a margin ...\r\n\t\tmarginLeft: 2,\r\n\r\n\t\t// ... and a bullet character!\r\n\t\tbullet: '\"<grey>o</grey>\"'\r\n\r\n\t\t// Notes on bullets:\r\n\t\t//\r\n\t\t// The string inside the quotation mark will be used for bullets.\r\n\t\t//\r\n\t\t// You can set its color/background color using tags.\r\n\t\t//\r\n\t\t// This example sets the background color to white, and the text color\r\n\t\t// to cyan, the character will be a hyphen with a space character\r\n\t\t// on each side:\r\n\t\t// example: '\"<bg-white><cyan> - </cyan></bg-white>\"'\r\n\t\t//\r\n\t\t// Note that we should use a margin of 3, since the bullet will be\r\n\t\t// 3 characters long.\r\n\r\n\t},\r\n\r\n\t'pretty-error > trace > item > header > pointer > file': {\r\n\r\n\t\tcolor: 'bright-cyan'\r\n\r\n\t},\r\n\r\n\t'pretty-error > trace > item > header > pointer > colon': {\r\n\r\n\t\tcolor: 'cyan'\r\n\r\n\t},\r\n\r\n\t'pretty-error > trace > item > header > pointer > line': {\r\n\r\n\t\tcolor: 'bright-cyan'\r\n\r\n\t},\r\n\r\n\t'pretty-error > trace > item > header > what': {\r\n\r\n\t\tcolor: 'bright-white'\r\n\r\n\t},\r\n\r\n\t'pretty-error > trace > item > footer > addr': {\r\n\r\n\t\tdisplay: 'none'\r\n\r\n});\r\n```\r\n\r\nHere is how our minimal theme will look like:\r\n![screenshot of our custom theme](https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/custom-theme-screenshot.png)\r\n\r\nI'll post more examples on [RenderKid](https://github.com/AriaMinaei/renderkid) when it comes out of beta.\r\n\r\n## Customization\r\n\r\nThere are a few methods to help you customize the contents of your error logs.\r\n\r\nLet's instantiate first:\r\n```javascript\r\nPrettyError = require('pretty-error');\r\npe = new PrettyError();\r\n\r\n// or:\r\npe = require('pretty-error').start();\r\n```\r\n\r\n#### Shortening paths\r\nYou might want to substitute long paths with shorter, more readable aliases:\r\n```javascript\r\npe.alias('E:/open-source/theatrejs/scripts/js', '(Theare.js)');\r\n\r\n// to remove the alias:\r\npe.removeAlias('E:/open-source/theatrejs/scripts/js');\r\n\r\n// or:\r\npe.removeAllAliases();\r\n```\r\n\r\n#### Skipping packages\r\nYou might want to skip trace lines that belong to specific packages (chai, when, socket.io):\r\n```javascript\r\npe.skipPackage('chai', 'when', 'socket.io');\r\n\r\n// to unskip:\r\npe.unskipPackage('socket.io');\r\npe.unskipAllPackages();\r\n```\r\n\r\n#### Skipping node files\r\n```javascript\r\n// this will skip node.js, path.js, event.js, etc.\r\npe.skipNodeFiles();\r\n\r\n// also:\r\npe.unskipNodeFiles();\r\n```\r\n\r\n#### Skipping paths\r\n```javascript\r\npe.skipPath('/home/dir/someFile.js');\r\n\r\n// also:\r\npe.unskipPath('/home/dir/someFile.js');\r\npe.unskipAllPaths();\r\n```\r\n\r\n#### Skipping by callback\r\nYou can customize which trace lines get logged and which won't:\r\n```javascript\r\npe.skip(function(traceLine, lineNumber){\r\n\r\n\t// if we know which package this trace line comes from, and it isn't\r\n\t// our 'demo' package ...\r\n\tif (typeof traceLine.packageName !== 'undefined' && traceLine.packageName !== 'demo') {\r\n\t\t// then skip this line\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// You can console.log(traceLine) to see all of it's properties.\r\n\t// Don't expect all these properties to be present, and don't assume\r\n\t// that our traceLine is always an object.\r\n});\r\n\r\n// there is also:\r\npe.unskip(fn);\r\npe.unskipAll();\r\n```\r\n\r\n#### Modifying each trace line's contents\r\n```javascript\r\npe.filter(function(traceLine, lineNumber){\r\n\r\n\t// the 'what' clause is something like:\r\n\t// 'DynamicTimeline.module.exports.DynamicTimeline._verifyProp'\r\n\tif (typeof traceLine.what !== 'undefined'){\r\n\r\n\t\t// we can shorten it with a regex:\r\n\t\ttraceLine.what = traceLine.what.replace(\r\n\t\t\t/(.*\\.module\\.exports\\.)(.*)/, '$2'\r\n\t\t);\r\n\r\n\t}\r\n});\r\n\r\n// there is also:\r\npe.removeFilter(fn);\r\npe.removeAllFilters();\r\n```\r\n\r\n## State of the project\r\n\r\nPlease note that this is a work in progress, so there are rough edges. I'll try to add features and fix reported bugs, but feel free to fork this project and make your own changes.\r\n\r\n#### P.S.\r\n\r\n* If you're on windows, you can get better typography by using an alternative console. I use [ConEmu](http://conemu.codeplex.com).\r\n* Also check out [PrettyMonitor](https://github.com/AriaMinaei/pretty-monitor) if you're using [when.js](https://github.com/cujojs/when). It's PrettyError wrapped to report unhandled when.js rejections.\r\n\r\n## License\r\n\r\nMIT",
  "readmeFilename": "README.md",
  "_id": "pretty-error@0.1.17",
  "dist": {
    "shasum": "2e0ea37f9e66d54316337e6f59b9ef3f52b5bb11"
  },
  "_from": "pretty-error@",
  "_resolved": "https://registry.npmjs.org/pretty-error/-/pretty-error-0.1.17.tgz"
}
