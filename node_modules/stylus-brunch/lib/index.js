// Generated by CoffeeScript 1.3.3
(function() {
  var StylusCompiler, exec, fs, nib, spawn, sprite, stylus, sysPath, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  nib = require('nib');

  fs = require('fs');

  stylus = require('stylus');

  sysPath = require('path');

  sprite = require('node-sprite');

  module.exports = StylusCompiler = (function() {

    StylusCompiler.prototype.brunchPlugin = true;

    StylusCompiler.prototype.type = 'stylesheet';

    StylusCompiler.prototype.extension = 'styl';

    StylusCompiler.prototype._dependencyRegExp = /^ *@import ['"](.*)['"]/;

    function StylusCompiler(config) {
      var _ref1, _ref2, _ref3,
        _this = this;
      this.config = config;
      this.getDependencies = __bind(this.getDependencies, this);

      this.getCompiler = __bind(this.getCompiler, this);

      this.compile = __bind(this.compile, this);

      if ((_ref1 = this.config.stylus) != null ? _ref1.spriting : void 0) {
        this.iconPath = (_ref2 = (_ref3 = this.config.stylus) != null ? _ref3.iconPath : void 0) != null ? _ref2 : sysPath.join('images', 'icons');
        this.iconPathFull = sysPath.join(this.config.paths.assets, this.iconPath);
        if (!fs.existsSync(this.iconPathFull)) {
          console.error("Please make sure that the icon path " + this.iconpath + " exits");
        }
        exec('convert --version', function(error, stdout, stderr) {
          if (error) {
            return console.error("You need to have convert (ImageMagick) on your system for spriting");
          }
        });
      }
      null;
    }

    StylusCompiler.prototype.compile = function(data, path, callback) {
      var _this = this;
      return this.getCompiler(data, function(compiler) {
        var defines, _ref1, _ref2, _ref3;
        compiler = compiler.set('compress', false).set('firebug', !!((_ref1 = _this.config.stylus) != null ? _ref1.firebug : void 0)).include(sysPath.join(_this.config.paths.root)).include(sysPath.dirname(path)).use(nib());
        if (_this.config.stylus) {
          defines = (_ref2 = _this.config.stylus.defines) != null ? _ref2 : {};
          Object.keys(defines).forEach(function(name) {
            return compiler.define(name, defines[name]);
          });
          if ((_ref3 = _this.config.stylus.paths) != null) {
            _ref3.forEach(function(path) {
              return compiler.include(path);
            });
          }
        }
        return compiler.render(callback);
      });
    };

    StylusCompiler.prototype.getCompiler = function(data, callback) {
      var options, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
        _this = this;
      if ((_ref1 = this.config.stylus) != null ? _ref1.spriting : void 0) {
        options = {
          path: ((_ref2 = this.config.stylus) != null ? (_ref3 = _ref2.options) != null ? _ref3.path : void 0 : void 0) || this.iconPathFull,
          retina: ((_ref4 = this.config.stylus) != null ? (_ref5 = _ref4.options) != null ? _ref5.retina : void 0 : void 0) || '-2x',
          padding: ((_ref6 = this.config.stylus.options) != null ? _ref6.padding : void 0) || 2,
          httpPath: ((_ref7 = this.config.stylus) != null ? (_ref8 = _ref7.options) != null ? _ref8.httpPath : void 0 : void 0) || '../' + this.iconPath
        };
        return sprite.stylus(options, function(err, helper) {
          return callback(stylus(data).define('sprite', helper.fn));
        });
      } else {
        return callback(stylus(data));
      }
    };

    StylusCompiler.prototype.getDependencies = function(data, path, callback) {
      var dependencies, parent,
        _this = this;
      parent = sysPath.dirname(path);
      dependencies = data.split('\n').map(function(line) {
        return line.match(_this._dependencyRegExp);
      }).filter(function(match) {
        return (match != null ? match.length : void 0) > 0;
      }).map(function(match) {
        return match[1];
      }).filter(function(path) {
        return !!path && path !== 'nib';
      }).map(function(path) {
        if (sysPath.extname(path) !== ("." + _this.extension)) {
          return path + ("." + _this.extension);
        } else {
          return path;
        }
      }).map(function(path) {
        if (path.charAt(0) === '/') {
          return sysPath.join(_this.config.paths.root, path.slice(1));
        } else {
          return sysPath.join(parent, path);
        }
      });
      return process.nextTick(function() {
        return callback(null, dependencies);
      });
    };

    return StylusCompiler;

  })();

}).call(this);
