// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var SourceFile, SourceMapConsumer, SourceMapGenerator, SourceNode, debug, identityNode, isWindows, makeCompiler, makeWrapper, os, pipeline, replaceBackSlashes, sysPath, updateCache, updateMap, _ref, _ref1;

  debug = require('debug')('brunch:source-file');

  sysPath = require('path');

  os = require('os');

  pipeline = require('./pipeline').pipeline;

  _ref = require('../helpers'), identityNode = _ref.identityNode, replaceBackSlashes = _ref.replaceBackSlashes, isWindows = _ref.isWindows;

  _ref1 = require('source-map'), SourceMapConsumer = _ref1.SourceMapConsumer, SourceMapGenerator = _ref1.SourceMapGenerator, SourceNode = _ref1.SourceNode;

  updateMap = function(path, compiled, wrapped, sourceMap) {
    var map, mapping, node, prefix, sourcePos, suffix, wrapperContent;
    if (sourceMap) {
      debug(("Generated source map for '" + path + "': ") + JSON.stringify(sourceMap));
    }
    if (typeof wrapped === 'object') {
      prefix = wrapped.prefix, suffix = wrapped.suffix;
      wrapperContent = wrapped.data || compiled;
    } else {
      sourcePos = wrapped.indexOf(compiled);
      wrapperContent = sourcePos > 0 ? compiled : wrapped;
      prefix = wrapped.slice(0, sourcePos);
      suffix = wrapped.slice(sourcePos + compiled.length);
    }
    node = sourceMap != null ? (mapping = typeof sourceMap === 'string' ? JSON.parse(sourceMap.replace(/^\)\]\}'/, '')) : sourceMap, isWindows && mapping.sources ? mapping.sources = mapping.sources.map(replaceBackSlashes) : void 0, map = new SourceMapConsumer(mapping), SourceNode.fromStringWithSourceMap(wrapperContent, map)) : identityNode(wrapperContent, path);
    node.isIdentity = sourceMap == null;
    if (prefix) {
      node.prepend(prefix);
    }
    if (suffix) {
      node.add(suffix);
    }
    node.source = path;
    node.setSourceContent(path, wrapperContent);
    return node;
  };

  updateCache = function(path, cache, error, result, wrap) {
    var compiled;
    if (error != null) {
      cache.error = error;
      return cache;
    }
    if (result == null) {
      cache.error = null;
      cache.data = null;
      cache.compilationTime = Date.now();
      return cache;
    }
    cache.error = null;
    cache.dependencies = result.dependencies;
    cache.source = result.source;
    cache.compilationTime = Date.now();
    cache.data = result.compiled;
    compiled = result.compiled;
    cache.node = updateMap(path, compiled, wrap(compiled), result.sourceMap);
    return cache;
  };

  makeWrapper = function(wrapper, path, isWrapped, isntModule) {
    return function(node) {
      if (isWrapped) {
        return wrapper(path, node, isntModule);
      } else {
        return node;
      }
    };
  };

  makeCompiler = function(path, cache, linters, compilers, wrap) {
    var normalizedPath;
    normalizedPath = replaceBackSlashes(path);
    return function(callback) {
      var _this = this;
      return pipeline(path, linters, compilers, function(error, data) {
        updateCache(normalizedPath, cache, error, data, wrap);
        return callback(error, cache.data);
      });
    };
  };

  module.exports = SourceFile = (function() {
    function SourceFile(path, compilers, linters, wrapper, isHelper, isVendor) {
      var compiler, isWrapped, isntModule, wrap, _ref2;
      this.path = path;
      this.isHelper = isHelper;
      compiler = compilers[0];
      isntModule = this.isHelper || isVendor;
      isWrapped = (_ref2 = compiler.type) === 'javascript' || _ref2 === 'template';
      this.type = compiler.type;
      this.source = null;
      this.data = '';
      this.node = null;
      this.dependencies = [];
      this.compilationTime = null;
      this.error = null;
      this.removed = false;
      this.disposed = false;
      wrap = makeWrapper(wrapper, this.path, isWrapped, isntModule);
      this.compile = makeCompiler(this.path, this, linters, compilers, wrap);
      debug("Initializing fs_utils.SourceFile: %s", JSON.stringify({
        path: this.path,
        isntModule: isntModule,
        isWrapped: isWrapped
      }));
      Object.seal(this);
    }

    SourceFile.prototype.dispose = function() {
      debug("Disposing '" + this.path + "'");
      this.path = '';
      this.data = '';
      this.dependencies = [];
      this.disposed = true;
      return Object.freeze(this);
    };

    return SourceFile;

  })();

}).call(this);
