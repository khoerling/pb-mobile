// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var copyCounter, copyQueue, debug, fs, ignored, ignoredAlways, isWindows, mkdirp, ncp, os, sysPath;

  debug = require('debug')('brunch:common');

  fs = require('fs');

  mkdirp = require('mkdirp');

  ncp = require('ncp').ncp;

  os = require('os');

  sysPath = require('path');

  isWindows = require('../helpers').isWindows;

  exports.exists = fs.exists || sysPath.exists;

  exports.sep = sysPath.sep || (isWindows ? '\\' : '/');

  exports.writeFile = function(path, data, callback) {
    var write;
    debug("Writing file '" + path + "'");
    write = function(callback) {
      return fs.writeFile(path, data, callback);
    };
    return write(function(error) {
      if (error == null) {
        return callback(null, path, data);
      }
      return mkdirp(sysPath.dirname(path), 0x1ed, function(error) {
        if (error != null) {
          return callback(error);
        }
        return write(function(error) {
          return callback(error, path, data);
        });
      });
    });
  };

  exports.ignored = ignored = (function() {
    var re1, re2;
    re1 = /\.(?!htaccess|rewrite)/;
    re2 = /(^[.#]|(?:__|~)$)/;
    return function(path) {
      var base;
      base = sysPath.basename(path);
      return re1.test(base) && re2.test(base);
    };
  })();

  exports.ignoredAlways = ignoredAlways = function(path) {
    return /^\.(git|hg)$/.test(sysPath.basename(path));
  };

  copyCounter = 0;

  copyQueue = [];

  exports.copy = function(source, destination, callback) {
    var copy, parentDir;
    if (ignored(source)) {
      return callback();
    }
    copy = function(error, retries) {
      var fsStreamErrHandler, fsStreamFinishHandler, input, instanceError, output;
      if (retries == null) {
        retries = 0;
      }
      if (error != null) {
        return callback(error);
      }
      copyCounter++;
      instanceError = false;
      fsStreamErrHandler = function(err) {
        if (instanceError) {
          return;
        }
        instanceError = true;
        copyCounter--;
        switch ((retries < 5 ? err.code : void 0)) {
          case 'OK':
          case 'UNKNOWN':
          case 'EMFILE':
            return copyQueue.push(function() {
              return copy(null, ++retries);
            });
          case 'EBUSY':
            return setTimeout((function() {
              return copy(null, retries);
            }), 100 * ++retries);
          default:
            debug("File copy: " + err);
            return callback(err);
        }
      };
      fsStreamFinishHandler = function() {
        if (--copyCounter < 1 && copyQueue.length) {
          process.nextTick(copyQueue.shift());
        }
        callback();
        return fsStreamFinishHandler = function() {};
      };
      input = fs.createReadStream(source);
      output = input.pipe(fs.createWriteStream(destination));
      input.on('error', fsStreamErrHandler);
      output.on('error', fsStreamErrHandler);
      output.on('close', fsStreamFinishHandler);
      return output.on('finish', fsStreamFinishHandler);
    };
    parentDir = sysPath.dirname(destination);
    return exports.exists(parentDir, function(exists) {
      if (exists) {
        if (copyQueue.length) {
          return copyQueue.push(copy);
        } else {
          return copy();
        }
      } else {
        return mkdirp(parentDir, copy);
      }
    });
  };

  exports.copyIfExists = function(source, destination, filter, callback) {
    var options;
    if (filter == null) {
      filter = true;
    }
    options = {
      stopOnError: true
    };
    options.filter = filter ? function(path) {
      return !ignored(path);
    } : function(path) {
      return !ignoredAlways(path);
    };
    return exports.exists(source, function(exists) {
      if (!exists) {
        return callback();
      }
      return ncp(source, destination, options, callback);
    });
  };

}).call(this);
